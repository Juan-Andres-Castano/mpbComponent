/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MPBCOMMANDHANDLER_H
#define _MOCK_MPBCOMMANDHANDLER_H

#include "mpbCommandHandler.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_mpbCommandHandler_Init(void);
void mock_mpbCommandHandler_Destroy(void);
void mock_mpbCommandHandler_Verify(void);




#define mpbCommandHandler_Init_Ignore() mpbCommandHandler_Init_CMockIgnore()
void mpbCommandHandler_Init_CMockIgnore(void);
#define mpbCommandHandler_Init_ExpectAnyArgs() mpbCommandHandler_Init_CMockExpectAnyArgs(__LINE__)
void mpbCommandHandler_Init_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define mpbCommandHandler_Init_Expect() mpbCommandHandler_Init_CMockExpect(__LINE__)
void mpbCommandHandler_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_mpbCommandHandler_Init_CALLBACK)(int cmock_num_calls);
void mpbCommandHandler_Init_StubWithCallback(CMOCK_mpbCommandHandler_Init_CALLBACK Callback);
#define eMpbCommandHandlerGetStatus_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerGetStatus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerGetStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerGetStatus_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerGetStatus_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerGetStatus_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerGetStatus_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerGetStatus_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerGetStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerGetStatus_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerGetStatus_StubWithCallback(CMOCK_eMpbCommandHandlerGetStatus_CALLBACK Callback);
#define eMpbCommandHandlerGetStatus_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerGetStatus_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerGetStatus_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerGetStatus_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerGetStatus_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerGetStatus_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerGetStatus_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerGetStatus_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerGetStatus_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerGetStatus_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerGetStatus_IgnoreArg_Msg() eMpbCommandHandlerGetStatus_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerGetStatus_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define eMpbCommandHandlerStandby_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerStandby_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerStandby_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerStandby_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerStandby_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerStandby_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerStandby_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerStandby_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerStandby_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerStandby_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerStandby_StubWithCallback(CMOCK_eMpbCommandHandlerStandby_CALLBACK Callback);
#define eMpbCommandHandlerStandby_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerStandby_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerStandby_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerStandby_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerStandby_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerStandby_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerStandby_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerStandby_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerStandby_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerStandby_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerStandby_IgnoreArg_Msg() eMpbCommandHandlerStandby_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerStandby_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define eMpbCommandHandlerSetup_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerSetup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerSetup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerSetup_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerSetup_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerSetup_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerSetup_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerSetup_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerSetup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerSetup_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerSetup_StubWithCallback(CMOCK_eMpbCommandHandlerSetup_CALLBACK Callback);
#define eMpbCommandHandlerSetup_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerSetup_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerSetup_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerSetup_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerSetup_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerSetup_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerSetup_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerSetup_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerSetup_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerSetup_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerSetup_IgnoreArg_Msg() eMpbCommandHandlerSetup_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerSetup_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define eMpbCommandHandlerUpdate_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerUpdate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerUpdate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerUpdate_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerUpdate_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerUpdate_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerUpdate_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerUpdate_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerUpdate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerUpdate_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerUpdate_StubWithCallback(CMOCK_eMpbCommandHandlerUpdate_CALLBACK Callback);
#define eMpbCommandHandlerUpdate_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerUpdate_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerUpdate_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerUpdate_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerUpdate_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerUpdate_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerUpdate_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerUpdate_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerUpdate_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerUpdate_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerUpdate_IgnoreArg_Msg() eMpbCommandHandlerUpdate_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerUpdate_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define eMpbCommandHandlerBeaconOff_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerBeaconOff_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerBeaconOff_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerBeaconOff_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerBeaconOff_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerBeaconOff_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerBeaconOff_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerBeaconOff_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerBeaconOff_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerBeaconOff_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerBeaconOff_StubWithCallback(CMOCK_eMpbCommandHandlerBeaconOff_CALLBACK Callback);
#define eMpbCommandHandlerBeaconOff_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerBeaconOff_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerBeaconOff_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerBeaconOff_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerBeaconOff_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerBeaconOff_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerBeaconOff_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerBeaconOff_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerBeaconOff_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerBeaconOff_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerBeaconOff_IgnoreArg_Msg() eMpbCommandHandlerBeaconOff_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerBeaconOff_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define eMpbCommandHandlerGetLedEnable_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerGetLedEnable_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerGetLedEnable_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerGetLedEnable_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerGetLedEnable_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerGetLedEnable_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerGetLedEnable_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerGetLedEnable_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerGetLedEnable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerGetLedEnable_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerGetLedEnable_StubWithCallback(CMOCK_eMpbCommandHandlerGetLedEnable_CALLBACK Callback);
#define eMpbCommandHandlerGetLedEnable_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerGetLedEnable_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerGetLedEnable_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerGetLedEnable_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerGetLedEnable_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerGetLedEnable_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerGetLedEnable_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerGetLedEnable_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerGetLedEnable_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerGetLedEnable_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerGetLedEnable_IgnoreArg_Msg() eMpbCommandHandlerGetLedEnable_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerGetLedEnable_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define eMpbCommandHandlerSetLedEnable_IgnoreAndReturn(cmock_retval) eMpbCommandHandlerSetLedEnable_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerSetLedEnable_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerSetLedEnable_ExpectAnyArgsAndReturn(cmock_retval) eMpbCommandHandlerSetLedEnable_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbCommandHandlerSetLedEnable_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerSetLedEnable_ExpectAndReturn(Msg, cmock_retval) eMpbCommandHandlerSetLedEnable_CMockExpectAndReturn(__LINE__, Msg, cmock_retval)
void eMpbCommandHandlerSetLedEnable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbCommandHandlerSetLedEnable_CALLBACK)(xM2mMessage_t* Msg, int cmock_num_calls);
void eMpbCommandHandlerSetLedEnable_StubWithCallback(CMOCK_eMpbCommandHandlerSetLedEnable_CALLBACK Callback);
#define eMpbCommandHandlerSetLedEnable_ExpectWithArrayAndReturn(Msg, Msg_Depth, cmock_retval) eMpbCommandHandlerSetLedEnable_CMockExpectWithArrayAndReturn(__LINE__, Msg, Msg_Depth, cmock_retval)
void eMpbCommandHandlerSetLedEnable_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int Msg_Depth, eMpbError_t cmock_to_return);
#define eMpbCommandHandlerSetLedEnable_ReturnThruPtr_Msg(Msg) eMpbCommandHandlerSetLedEnable_CMockReturnMemThruPtr_Msg(__LINE__, Msg, sizeof(*Msg))
#define eMpbCommandHandlerSetLedEnable_ReturnArrayThruPtr_Msg(Msg, cmock_len) eMpbCommandHandlerSetLedEnable_CMockReturnMemThruPtr_Msg(__LINE__, Msg, (int)(cmock_len * (int)sizeof(*Msg)))
#define eMpbCommandHandlerSetLedEnable_ReturnMemThruPtr_Msg(Msg, cmock_size) eMpbCommandHandlerSetLedEnable_CMockReturnMemThruPtr_Msg(__LINE__, Msg, cmock_size)
void eMpbCommandHandlerSetLedEnable_CMockReturnMemThruPtr_Msg(UNITY_LINE_TYPE cmock_line, xM2mMessage_t* Msg, int cmock_size);
#define eMpbCommandHandlerSetLedEnable_IgnoreArg_Msg() eMpbCommandHandlerSetLedEnable_CMockIgnoreArg_Msg(__LINE__)
void eMpbCommandHandlerSetLedEnable_CMockIgnoreArg_Msg(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetStatusInfo_Ignore() vMpbCommandHandlerGetStatusInfo_CMockIgnore()
void vMpbCommandHandlerGetStatusInfo_CMockIgnore(void);
#define vMpbCommandHandlerGetStatusInfo_ExpectAnyArgs() vMpbCommandHandlerGetStatusInfo_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetStatusInfo_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetStatusInfo_Expect(ucBeaconId, pucStatusRegister) vMpbCommandHandlerGetStatusInfo_CMockExpect(__LINE__, ucBeaconId, pucStatusRegister)
void vMpbCommandHandlerGetStatusInfo_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint32_t* pucStatusRegister);
typedef void (* CMOCK_vMpbCommandHandlerGetStatusInfo_CALLBACK)(uint8_t ucBeaconId, uint32_t* pucStatusRegister, int cmock_num_calls);
void vMpbCommandHandlerGetStatusInfo_StubWithCallback(CMOCK_vMpbCommandHandlerGetStatusInfo_CALLBACK Callback);
#define vMpbCommandHandlerGetStatusInfo_ExpectWithArray(ucBeaconId, pucStatusRegister, pucStatusRegister_Depth) vMpbCommandHandlerGetStatusInfo_CMockExpectWithArray(__LINE__, ucBeaconId, pucStatusRegister, pucStatusRegister_Depth)
void vMpbCommandHandlerGetStatusInfo_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint32_t* pucStatusRegister, int pucStatusRegister_Depth);
#define vMpbCommandHandlerGetStatusInfo_ReturnThruPtr_pucStatusRegister(pucStatusRegister) vMpbCommandHandlerGetStatusInfo_CMockReturnMemThruPtr_pucStatusRegister(__LINE__, pucStatusRegister, sizeof(*pucStatusRegister))
#define vMpbCommandHandlerGetStatusInfo_ReturnArrayThruPtr_pucStatusRegister(pucStatusRegister, cmock_len) vMpbCommandHandlerGetStatusInfo_CMockReturnMemThruPtr_pucStatusRegister(__LINE__, pucStatusRegister, (int)(cmock_len * (int)sizeof(*pucStatusRegister)))
#define vMpbCommandHandlerGetStatusInfo_ReturnMemThruPtr_pucStatusRegister(pucStatusRegister, cmock_size) vMpbCommandHandlerGetStatusInfo_CMockReturnMemThruPtr_pucStatusRegister(__LINE__, pucStatusRegister, cmock_size)
void vMpbCommandHandlerGetStatusInfo_CMockReturnMemThruPtr_pucStatusRegister(UNITY_LINE_TYPE cmock_line, uint32_t* pucStatusRegister, int cmock_size);
#define vMpbCommandHandlerGetStatusInfo_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetStatusInfo_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetStatusInfo_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetStatusInfo_IgnoreArg_pucStatusRegister() vMpbCommandHandlerGetStatusInfo_CMockIgnoreArg_pucStatusRegister(__LINE__)
void vMpbCommandHandlerGetStatusInfo_CMockIgnoreArg_pucStatusRegister(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetAlarmsInfo_Ignore() vMpbCommandHandlerGetAlarmsInfo_CMockIgnore()
void vMpbCommandHandlerGetAlarmsInfo_CMockIgnore(void);
#define vMpbCommandHandlerGetAlarmsInfo_ExpectAnyArgs() vMpbCommandHandlerGetAlarmsInfo_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetAlarmsInfo_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetAlarmsInfo_Expect(ucBeaconId, pucAlarmRegister) vMpbCommandHandlerGetAlarmsInfo_CMockExpect(__LINE__, ucBeaconId, pucAlarmRegister)
void vMpbCommandHandlerGetAlarmsInfo_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint64_t* pucAlarmRegister);
typedef void (* CMOCK_vMpbCommandHandlerGetAlarmsInfo_CALLBACK)(uint8_t ucBeaconId, uint64_t* pucAlarmRegister, int cmock_num_calls);
void vMpbCommandHandlerGetAlarmsInfo_StubWithCallback(CMOCK_vMpbCommandHandlerGetAlarmsInfo_CALLBACK Callback);
#define vMpbCommandHandlerGetAlarmsInfo_ExpectWithArray(ucBeaconId, pucAlarmRegister, pucAlarmRegister_Depth) vMpbCommandHandlerGetAlarmsInfo_CMockExpectWithArray(__LINE__, ucBeaconId, pucAlarmRegister, pucAlarmRegister_Depth)
void vMpbCommandHandlerGetAlarmsInfo_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint64_t* pucAlarmRegister, int pucAlarmRegister_Depth);
#define vMpbCommandHandlerGetAlarmsInfo_ReturnThruPtr_pucAlarmRegister(pucAlarmRegister) vMpbCommandHandlerGetAlarmsInfo_CMockReturnMemThruPtr_pucAlarmRegister(__LINE__, pucAlarmRegister, sizeof(*pucAlarmRegister))
#define vMpbCommandHandlerGetAlarmsInfo_ReturnArrayThruPtr_pucAlarmRegister(pucAlarmRegister, cmock_len) vMpbCommandHandlerGetAlarmsInfo_CMockReturnMemThruPtr_pucAlarmRegister(__LINE__, pucAlarmRegister, (int)(cmock_len * (int)sizeof(*pucAlarmRegister)))
#define vMpbCommandHandlerGetAlarmsInfo_ReturnMemThruPtr_pucAlarmRegister(pucAlarmRegister, cmock_size) vMpbCommandHandlerGetAlarmsInfo_CMockReturnMemThruPtr_pucAlarmRegister(__LINE__, pucAlarmRegister, cmock_size)
void vMpbCommandHandlerGetAlarmsInfo_CMockReturnMemThruPtr_pucAlarmRegister(UNITY_LINE_TYPE cmock_line, uint64_t* pucAlarmRegister, int cmock_size);
#define vMpbCommandHandlerGetAlarmsInfo_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetAlarmsInfo_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetAlarmsInfo_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetAlarmsInfo_IgnoreArg_pucAlarmRegister() vMpbCommandHandlerGetAlarmsInfo_CMockIgnoreArg_pucAlarmRegister(__LINE__)
void vMpbCommandHandlerGetAlarmsInfo_CMockIgnoreArg_pucAlarmRegister(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetOperationmode_Ignore() vMpbCommandHandlerGetOperationmode_CMockIgnore()
void vMpbCommandHandlerGetOperationmode_CMockIgnore(void);
#define vMpbCommandHandlerGetOperationmode_ExpectAnyArgs() vMpbCommandHandlerGetOperationmode_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetOperationmode_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetOperationmode_Expect(ucBeaconId, pucOperationMode) vMpbCommandHandlerGetOperationmode_CMockExpect(__LINE__, ucBeaconId, pucOperationMode)
void vMpbCommandHandlerGetOperationmode_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint8_t* pucOperationMode);
typedef void (* CMOCK_vMpbCommandHandlerGetOperationmode_CALLBACK)(uint8_t ucBeaconId, uint8_t* pucOperationMode, int cmock_num_calls);
void vMpbCommandHandlerGetOperationmode_StubWithCallback(CMOCK_vMpbCommandHandlerGetOperationmode_CALLBACK Callback);
#define vMpbCommandHandlerGetOperationmode_ExpectWithArray(ucBeaconId, pucOperationMode, pucOperationMode_Depth) vMpbCommandHandlerGetOperationmode_CMockExpectWithArray(__LINE__, ucBeaconId, pucOperationMode, pucOperationMode_Depth)
void vMpbCommandHandlerGetOperationmode_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint8_t* pucOperationMode, int pucOperationMode_Depth);
#define vMpbCommandHandlerGetOperationmode_ReturnThruPtr_pucOperationMode(pucOperationMode) vMpbCommandHandlerGetOperationmode_CMockReturnMemThruPtr_pucOperationMode(__LINE__, pucOperationMode, sizeof(*pucOperationMode))
#define vMpbCommandHandlerGetOperationmode_ReturnArrayThruPtr_pucOperationMode(pucOperationMode, cmock_len) vMpbCommandHandlerGetOperationmode_CMockReturnMemThruPtr_pucOperationMode(__LINE__, pucOperationMode, (int)(cmock_len * (int)sizeof(*pucOperationMode)))
#define vMpbCommandHandlerGetOperationmode_ReturnMemThruPtr_pucOperationMode(pucOperationMode, cmock_size) vMpbCommandHandlerGetOperationmode_CMockReturnMemThruPtr_pucOperationMode(__LINE__, pucOperationMode, cmock_size)
void vMpbCommandHandlerGetOperationmode_CMockReturnMemThruPtr_pucOperationMode(UNITY_LINE_TYPE cmock_line, uint8_t* pucOperationMode, int cmock_size);
#define vMpbCommandHandlerGetOperationmode_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetOperationmode_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetOperationmode_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetOperationmode_IgnoreArg_pucOperationMode() vMpbCommandHandlerGetOperationmode_CMockIgnoreArg_pucOperationMode(__LINE__)
void vMpbCommandHandlerGetOperationmode_CMockIgnoreArg_pucOperationMode(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetSetpoint_Ignore() vMpbCommandHandlerGetSetpoint_CMockIgnore()
void vMpbCommandHandlerGetSetpoint_CMockIgnore(void);
#define vMpbCommandHandlerGetSetpoint_ExpectAnyArgs() vMpbCommandHandlerGetSetpoint_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetSetpoint_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetSetpoint_Expect(ucBeaconId, pusGetSetpoint) vMpbCommandHandlerGetSetpoint_CMockExpect(__LINE__, ucBeaconId, pusGetSetpoint)
void vMpbCommandHandlerGetSetpoint_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusGetSetpoint);
typedef void (* CMOCK_vMpbCommandHandlerGetSetpoint_CALLBACK)(uint8_t ucBeaconId, uint16_t* pusGetSetpoint, int cmock_num_calls);
void vMpbCommandHandlerGetSetpoint_StubWithCallback(CMOCK_vMpbCommandHandlerGetSetpoint_CALLBACK Callback);
#define vMpbCommandHandlerGetSetpoint_ExpectWithArray(ucBeaconId, pusGetSetpoint, pusGetSetpoint_Depth) vMpbCommandHandlerGetSetpoint_CMockExpectWithArray(__LINE__, ucBeaconId, pusGetSetpoint, pusGetSetpoint_Depth)
void vMpbCommandHandlerGetSetpoint_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusGetSetpoint, int pusGetSetpoint_Depth);
#define vMpbCommandHandlerGetSetpoint_ReturnThruPtr_pusGetSetpoint(pusGetSetpoint) vMpbCommandHandlerGetSetpoint_CMockReturnMemThruPtr_pusGetSetpoint(__LINE__, pusGetSetpoint, sizeof(*pusGetSetpoint))
#define vMpbCommandHandlerGetSetpoint_ReturnArrayThruPtr_pusGetSetpoint(pusGetSetpoint, cmock_len) vMpbCommandHandlerGetSetpoint_CMockReturnMemThruPtr_pusGetSetpoint(__LINE__, pusGetSetpoint, (int)(cmock_len * (int)sizeof(*pusGetSetpoint)))
#define vMpbCommandHandlerGetSetpoint_ReturnMemThruPtr_pusGetSetpoint(pusGetSetpoint, cmock_size) vMpbCommandHandlerGetSetpoint_CMockReturnMemThruPtr_pusGetSetpoint(__LINE__, pusGetSetpoint, cmock_size)
void vMpbCommandHandlerGetSetpoint_CMockReturnMemThruPtr_pusGetSetpoint(UNITY_LINE_TYPE cmock_line, uint16_t* pusGetSetpoint, int cmock_size);
#define vMpbCommandHandlerGetSetpoint_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetSetpoint_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetSetpoint_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetSetpoint_IgnoreArg_pusGetSetpoint() vMpbCommandHandlerGetSetpoint_CMockIgnoreArg_pusGetSetpoint(__LINE__)
void vMpbCommandHandlerGetSetpoint_CMockIgnoreArg_pusGetSetpoint(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetCurrent_Ignore() vMpbCommandHandlerGetCurrent_CMockIgnore()
void vMpbCommandHandlerGetCurrent_CMockIgnore(void);
#define vMpbCommandHandlerGetCurrent_ExpectAnyArgs() vMpbCommandHandlerGetCurrent_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetCurrent_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetCurrent_Expect(ucBeaconId, pusGetCurrent) vMpbCommandHandlerGetCurrent_CMockExpect(__LINE__, ucBeaconId, pusGetCurrent)
void vMpbCommandHandlerGetCurrent_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusGetCurrent);
typedef void (* CMOCK_vMpbCommandHandlerGetCurrent_CALLBACK)(uint8_t ucBeaconId, uint16_t* pusGetCurrent, int cmock_num_calls);
void vMpbCommandHandlerGetCurrent_StubWithCallback(CMOCK_vMpbCommandHandlerGetCurrent_CALLBACK Callback);
#define vMpbCommandHandlerGetCurrent_ExpectWithArray(ucBeaconId, pusGetCurrent, pusGetCurrent_Depth) vMpbCommandHandlerGetCurrent_CMockExpectWithArray(__LINE__, ucBeaconId, pusGetCurrent, pusGetCurrent_Depth)
void vMpbCommandHandlerGetCurrent_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusGetCurrent, int pusGetCurrent_Depth);
#define vMpbCommandHandlerGetCurrent_ReturnThruPtr_pusGetCurrent(pusGetCurrent) vMpbCommandHandlerGetCurrent_CMockReturnMemThruPtr_pusGetCurrent(__LINE__, pusGetCurrent, sizeof(*pusGetCurrent))
#define vMpbCommandHandlerGetCurrent_ReturnArrayThruPtr_pusGetCurrent(pusGetCurrent, cmock_len) vMpbCommandHandlerGetCurrent_CMockReturnMemThruPtr_pusGetCurrent(__LINE__, pusGetCurrent, (int)(cmock_len * (int)sizeof(*pusGetCurrent)))
#define vMpbCommandHandlerGetCurrent_ReturnMemThruPtr_pusGetCurrent(pusGetCurrent, cmock_size) vMpbCommandHandlerGetCurrent_CMockReturnMemThruPtr_pusGetCurrent(__LINE__, pusGetCurrent, cmock_size)
void vMpbCommandHandlerGetCurrent_CMockReturnMemThruPtr_pusGetCurrent(UNITY_LINE_TYPE cmock_line, uint16_t* pusGetCurrent, int cmock_size);
#define vMpbCommandHandlerGetCurrent_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetCurrent_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetCurrent_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetCurrent_IgnoreArg_pusGetCurrent() vMpbCommandHandlerGetCurrent_CMockIgnoreArg_pusGetCurrent(__LINE__)
void vMpbCommandHandlerGetCurrent_CMockIgnoreArg_pusGetCurrent(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetPower_Ignore() vMpbCommandHandlerGetPower_CMockIgnore()
void vMpbCommandHandlerGetPower_CMockIgnore(void);
#define vMpbCommandHandlerGetPower_ExpectAnyArgs() vMpbCommandHandlerGetPower_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetPower_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetPower_Expect(ucBeaconId, pusGetPower) vMpbCommandHandlerGetPower_CMockExpect(__LINE__, ucBeaconId, pusGetPower)
void vMpbCommandHandlerGetPower_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusGetPower);
typedef void (* CMOCK_vMpbCommandHandlerGetPower_CALLBACK)(uint8_t ucBeaconId, uint16_t* pusGetPower, int cmock_num_calls);
void vMpbCommandHandlerGetPower_StubWithCallback(CMOCK_vMpbCommandHandlerGetPower_CALLBACK Callback);
#define vMpbCommandHandlerGetPower_ExpectWithArray(ucBeaconId, pusGetPower, pusGetPower_Depth) vMpbCommandHandlerGetPower_CMockExpectWithArray(__LINE__, ucBeaconId, pusGetPower, pusGetPower_Depth)
void vMpbCommandHandlerGetPower_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusGetPower, int pusGetPower_Depth);
#define vMpbCommandHandlerGetPower_ReturnThruPtr_pusGetPower(pusGetPower) vMpbCommandHandlerGetPower_CMockReturnMemThruPtr_pusGetPower(__LINE__, pusGetPower, sizeof(*pusGetPower))
#define vMpbCommandHandlerGetPower_ReturnArrayThruPtr_pusGetPower(pusGetPower, cmock_len) vMpbCommandHandlerGetPower_CMockReturnMemThruPtr_pusGetPower(__LINE__, pusGetPower, (int)(cmock_len * (int)sizeof(*pusGetPower)))
#define vMpbCommandHandlerGetPower_ReturnMemThruPtr_pusGetPower(pusGetPower, cmock_size) vMpbCommandHandlerGetPower_CMockReturnMemThruPtr_pusGetPower(__LINE__, pusGetPower, cmock_size)
void vMpbCommandHandlerGetPower_CMockReturnMemThruPtr_pusGetPower(UNITY_LINE_TYPE cmock_line, uint16_t* pusGetPower, int cmock_size);
#define vMpbCommandHandlerGetPower_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetPower_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetPower_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetPower_IgnoreArg_pusGetPower() vMpbCommandHandlerGetPower_CMockIgnoreArg_pusGetPower(__LINE__)
void vMpbCommandHandlerGetPower_CMockIgnoreArg_pusGetPower(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetFrequency_Ignore() vMpbCommandHandlerGetFrequency_CMockIgnore()
void vMpbCommandHandlerGetFrequency_CMockIgnore(void);
#define vMpbCommandHandlerGetFrequency_ExpectAnyArgs() vMpbCommandHandlerGetFrequency_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetFrequency_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetFrequency_Expect(ucBeaconId, pusFrequency) vMpbCommandHandlerGetFrequency_CMockExpect(__LINE__, ucBeaconId, pusFrequency)
void vMpbCommandHandlerGetFrequency_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusFrequency);
typedef void (* CMOCK_vMpbCommandHandlerGetFrequency_CALLBACK)(uint8_t ucBeaconId, uint16_t* pusFrequency, int cmock_num_calls);
void vMpbCommandHandlerGetFrequency_StubWithCallback(CMOCK_vMpbCommandHandlerGetFrequency_CALLBACK Callback);
#define vMpbCommandHandlerGetFrequency_ExpectWithArray(ucBeaconId, pusFrequency, pusFrequency_Depth) vMpbCommandHandlerGetFrequency_CMockExpectWithArray(__LINE__, ucBeaconId, pusFrequency, pusFrequency_Depth)
void vMpbCommandHandlerGetFrequency_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint16_t* pusFrequency, int pusFrequency_Depth);
#define vMpbCommandHandlerGetFrequency_ReturnThruPtr_pusFrequency(pusFrequency) vMpbCommandHandlerGetFrequency_CMockReturnMemThruPtr_pusFrequency(__LINE__, pusFrequency, sizeof(*pusFrequency))
#define vMpbCommandHandlerGetFrequency_ReturnArrayThruPtr_pusFrequency(pusFrequency, cmock_len) vMpbCommandHandlerGetFrequency_CMockReturnMemThruPtr_pusFrequency(__LINE__, pusFrequency, (int)(cmock_len * (int)sizeof(*pusFrequency)))
#define vMpbCommandHandlerGetFrequency_ReturnMemThruPtr_pusFrequency(pusFrequency, cmock_size) vMpbCommandHandlerGetFrequency_CMockReturnMemThruPtr_pusFrequency(__LINE__, pusFrequency, cmock_size)
void vMpbCommandHandlerGetFrequency_CMockReturnMemThruPtr_pusFrequency(UNITY_LINE_TYPE cmock_line, uint16_t* pusFrequency, int cmock_size);
#define vMpbCommandHandlerGetFrequency_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetFrequency_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetFrequency_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetFrequency_IgnoreArg_pusFrequency() vMpbCommandHandlerGetFrequency_CMockIgnoreArg_pusFrequency(__LINE__)
void vMpbCommandHandlerGetFrequency_CMockIgnoreArg_pusFrequency(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetLaserTemperature_Ignore() vMpbCommandHandlerGetLaserTemperature_CMockIgnore()
void vMpbCommandHandlerGetLaserTemperature_CMockIgnore(void);
#define vMpbCommandHandlerGetLaserTemperature_ExpectAnyArgs() vMpbCommandHandlerGetLaserTemperature_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetLaserTemperature_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetLaserTemperature_Expect(ucBeaconId, pfLaserTemperature) vMpbCommandHandlerGetLaserTemperature_CMockExpect(__LINE__, ucBeaconId, pfLaserTemperature)
void vMpbCommandHandlerGetLaserTemperature_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, float* pfLaserTemperature);
typedef void (* CMOCK_vMpbCommandHandlerGetLaserTemperature_CALLBACK)(uint8_t ucBeaconId, float* pfLaserTemperature, int cmock_num_calls);
void vMpbCommandHandlerGetLaserTemperature_StubWithCallback(CMOCK_vMpbCommandHandlerGetLaserTemperature_CALLBACK Callback);
#define vMpbCommandHandlerGetLaserTemperature_ExpectWithArray(ucBeaconId, pfLaserTemperature, pfLaserTemperature_Depth) vMpbCommandHandlerGetLaserTemperature_CMockExpectWithArray(__LINE__, ucBeaconId, pfLaserTemperature, pfLaserTemperature_Depth)
void vMpbCommandHandlerGetLaserTemperature_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, float* pfLaserTemperature, int pfLaserTemperature_Depth);
#define vMpbCommandHandlerGetLaserTemperature_ReturnThruPtr_pfLaserTemperature(pfLaserTemperature) vMpbCommandHandlerGetLaserTemperature_CMockReturnMemThruPtr_pfLaserTemperature(__LINE__, pfLaserTemperature, sizeof(*pfLaserTemperature))
#define vMpbCommandHandlerGetLaserTemperature_ReturnArrayThruPtr_pfLaserTemperature(pfLaserTemperature, cmock_len) vMpbCommandHandlerGetLaserTemperature_CMockReturnMemThruPtr_pfLaserTemperature(__LINE__, pfLaserTemperature, (int)(cmock_len * (int)sizeof(*pfLaserTemperature)))
#define vMpbCommandHandlerGetLaserTemperature_ReturnMemThruPtr_pfLaserTemperature(pfLaserTemperature, cmock_size) vMpbCommandHandlerGetLaserTemperature_CMockReturnMemThruPtr_pfLaserTemperature(__LINE__, pfLaserTemperature, cmock_size)
void vMpbCommandHandlerGetLaserTemperature_CMockReturnMemThruPtr_pfLaserTemperature(UNITY_LINE_TYPE cmock_line, float* pfLaserTemperature, int cmock_size);
#define vMpbCommandHandlerGetLaserTemperature_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetLaserTemperature_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetLaserTemperature_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetLaserTemperature_IgnoreArg_pfLaserTemperature() vMpbCommandHandlerGetLaserTemperature_CMockIgnoreArg_pfLaserTemperature(__LINE__)
void vMpbCommandHandlerGetLaserTemperature_CMockIgnoreArg_pfLaserTemperature(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetCaseTemperature_Ignore() vMpbCommandHandlerGetCaseTemperature_CMockIgnore()
void vMpbCommandHandlerGetCaseTemperature_CMockIgnore(void);
#define vMpbCommandHandlerGetCaseTemperature_ExpectAnyArgs() vMpbCommandHandlerGetCaseTemperature_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetCaseTemperature_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetCaseTemperature_Expect(ucBeaconId, pfCaseTemperature) vMpbCommandHandlerGetCaseTemperature_CMockExpect(__LINE__, ucBeaconId, pfCaseTemperature)
void vMpbCommandHandlerGetCaseTemperature_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, float* pfCaseTemperature);
typedef void (* CMOCK_vMpbCommandHandlerGetCaseTemperature_CALLBACK)(uint8_t ucBeaconId, float* pfCaseTemperature, int cmock_num_calls);
void vMpbCommandHandlerGetCaseTemperature_StubWithCallback(CMOCK_vMpbCommandHandlerGetCaseTemperature_CALLBACK Callback);
#define vMpbCommandHandlerGetCaseTemperature_ExpectWithArray(ucBeaconId, pfCaseTemperature, pfCaseTemperature_Depth) vMpbCommandHandlerGetCaseTemperature_CMockExpectWithArray(__LINE__, ucBeaconId, pfCaseTemperature, pfCaseTemperature_Depth)
void vMpbCommandHandlerGetCaseTemperature_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, float* pfCaseTemperature, int pfCaseTemperature_Depth);
#define vMpbCommandHandlerGetCaseTemperature_ReturnThruPtr_pfCaseTemperature(pfCaseTemperature) vMpbCommandHandlerGetCaseTemperature_CMockReturnMemThruPtr_pfCaseTemperature(__LINE__, pfCaseTemperature, sizeof(*pfCaseTemperature))
#define vMpbCommandHandlerGetCaseTemperature_ReturnArrayThruPtr_pfCaseTemperature(pfCaseTemperature, cmock_len) vMpbCommandHandlerGetCaseTemperature_CMockReturnMemThruPtr_pfCaseTemperature(__LINE__, pfCaseTemperature, (int)(cmock_len * (int)sizeof(*pfCaseTemperature)))
#define vMpbCommandHandlerGetCaseTemperature_ReturnMemThruPtr_pfCaseTemperature(pfCaseTemperature, cmock_size) vMpbCommandHandlerGetCaseTemperature_CMockReturnMemThruPtr_pfCaseTemperature(__LINE__, pfCaseTemperature, cmock_size)
void vMpbCommandHandlerGetCaseTemperature_CMockReturnMemThruPtr_pfCaseTemperature(UNITY_LINE_TYPE cmock_line, float* pfCaseTemperature, int cmock_size);
#define vMpbCommandHandlerGetCaseTemperature_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetCaseTemperature_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetCaseTemperature_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetCaseTemperature_IgnoreArg_pfCaseTemperature() vMpbCommandHandlerGetCaseTemperature_CMockIgnoreArg_pfCaseTemperature(__LINE__)
void vMpbCommandHandlerGetCaseTemperature_CMockIgnoreArg_pfCaseTemperature(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetDutyCycle_Ignore() vMpbCommandHandlerGetDutyCycle_CMockIgnore()
void vMpbCommandHandlerGetDutyCycle_CMockIgnore(void);
#define vMpbCommandHandlerGetDutyCycle_ExpectAnyArgs() vMpbCommandHandlerGetDutyCycle_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetDutyCycle_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetDutyCycle_Expect(ucBeaconId, pucDutyCycle) vMpbCommandHandlerGetDutyCycle_CMockExpect(__LINE__, ucBeaconId, pucDutyCycle)
void vMpbCommandHandlerGetDutyCycle_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint8_t* pucDutyCycle);
typedef void (* CMOCK_vMpbCommandHandlerGetDutyCycle_CALLBACK)(uint8_t ucBeaconId, uint8_t* pucDutyCycle, int cmock_num_calls);
void vMpbCommandHandlerGetDutyCycle_StubWithCallback(CMOCK_vMpbCommandHandlerGetDutyCycle_CALLBACK Callback);
#define vMpbCommandHandlerGetDutyCycle_ExpectWithArray(ucBeaconId, pucDutyCycle, pucDutyCycle_Depth) vMpbCommandHandlerGetDutyCycle_CMockExpectWithArray(__LINE__, ucBeaconId, pucDutyCycle, pucDutyCycle_Depth)
void vMpbCommandHandlerGetDutyCycle_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint8_t* pucDutyCycle, int pucDutyCycle_Depth);
#define vMpbCommandHandlerGetDutyCycle_ReturnThruPtr_pucDutyCycle(pucDutyCycle) vMpbCommandHandlerGetDutyCycle_CMockReturnMemThruPtr_pucDutyCycle(__LINE__, pucDutyCycle, sizeof(*pucDutyCycle))
#define vMpbCommandHandlerGetDutyCycle_ReturnArrayThruPtr_pucDutyCycle(pucDutyCycle, cmock_len) vMpbCommandHandlerGetDutyCycle_CMockReturnMemThruPtr_pucDutyCycle(__LINE__, pucDutyCycle, (int)(cmock_len * (int)sizeof(*pucDutyCycle)))
#define vMpbCommandHandlerGetDutyCycle_ReturnMemThruPtr_pucDutyCycle(pucDutyCycle, cmock_size) vMpbCommandHandlerGetDutyCycle_CMockReturnMemThruPtr_pucDutyCycle(__LINE__, pucDutyCycle, cmock_size)
void vMpbCommandHandlerGetDutyCycle_CMockReturnMemThruPtr_pucDutyCycle(UNITY_LINE_TYPE cmock_line, uint8_t* pucDutyCycle, int cmock_size);
#define vMpbCommandHandlerGetDutyCycle_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetDutyCycle_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetDutyCycle_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetDutyCycle_IgnoreArg_pucDutyCycle() vMpbCommandHandlerGetDutyCycle_CMockIgnoreArg_pucDutyCycle(__LINE__)
void vMpbCommandHandlerGetDutyCycle_CMockIgnoreArg_pucDutyCycle(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetTecStatus_Ignore() vMpbCommandHandlerGetTecStatus_CMockIgnore()
void vMpbCommandHandlerGetTecStatus_CMockIgnore(void);
#define vMpbCommandHandlerGetTecStatus_ExpectAnyArgs() vMpbCommandHandlerGetTecStatus_CMockExpectAnyArgs(__LINE__)
void vMpbCommandHandlerGetTecStatus_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetTecStatus_Expect(ucBeaconId, pucTecIsEnabled) vMpbCommandHandlerGetTecStatus_CMockExpect(__LINE__, ucBeaconId, pucTecIsEnabled)
void vMpbCommandHandlerGetTecStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint8_t* pucTecIsEnabled);
typedef void (* CMOCK_vMpbCommandHandlerGetTecStatus_CALLBACK)(uint8_t ucBeaconId, uint8_t* pucTecIsEnabled, int cmock_num_calls);
void vMpbCommandHandlerGetTecStatus_StubWithCallback(CMOCK_vMpbCommandHandlerGetTecStatus_CALLBACK Callback);
#define vMpbCommandHandlerGetTecStatus_ExpectWithArray(ucBeaconId, pucTecIsEnabled, pucTecIsEnabled_Depth) vMpbCommandHandlerGetTecStatus_CMockExpectWithArray(__LINE__, ucBeaconId, pucTecIsEnabled, pucTecIsEnabled_Depth)
void vMpbCommandHandlerGetTecStatus_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t ucBeaconId, uint8_t* pucTecIsEnabled, int pucTecIsEnabled_Depth);
#define vMpbCommandHandlerGetTecStatus_ReturnThruPtr_pucTecIsEnabled(pucTecIsEnabled) vMpbCommandHandlerGetTecStatus_CMockReturnMemThruPtr_pucTecIsEnabled(__LINE__, pucTecIsEnabled, sizeof(*pucTecIsEnabled))
#define vMpbCommandHandlerGetTecStatus_ReturnArrayThruPtr_pucTecIsEnabled(pucTecIsEnabled, cmock_len) vMpbCommandHandlerGetTecStatus_CMockReturnMemThruPtr_pucTecIsEnabled(__LINE__, pucTecIsEnabled, (int)(cmock_len * (int)sizeof(*pucTecIsEnabled)))
#define vMpbCommandHandlerGetTecStatus_ReturnMemThruPtr_pucTecIsEnabled(pucTecIsEnabled, cmock_size) vMpbCommandHandlerGetTecStatus_CMockReturnMemThruPtr_pucTecIsEnabled(__LINE__, pucTecIsEnabled, cmock_size)
void vMpbCommandHandlerGetTecStatus_CMockReturnMemThruPtr_pucTecIsEnabled(UNITY_LINE_TYPE cmock_line, uint8_t* pucTecIsEnabled, int cmock_size);
#define vMpbCommandHandlerGetTecStatus_IgnoreArg_ucBeaconId() vMpbCommandHandlerGetTecStatus_CMockIgnoreArg_ucBeaconId(__LINE__)
void vMpbCommandHandlerGetTecStatus_CMockIgnoreArg_ucBeaconId(UNITY_LINE_TYPE cmock_line);
#define vMpbCommandHandlerGetTecStatus_IgnoreArg_pucTecIsEnabled() vMpbCommandHandlerGetTecStatus_CMockIgnoreArg_pucTecIsEnabled(__LINE__)
void vMpbCommandHandlerGetTecStatus_CMockIgnoreArg_pucTecIsEnabled(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
